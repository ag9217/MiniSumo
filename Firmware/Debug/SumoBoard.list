
SumoBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003608  08003608  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003608  08003608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  0800361c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800361c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c603  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c48  00000000  00000000  0002c637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  0002eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b02a  00000000  00000000  0002fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e520  00000000  00000000  0004acc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2a12  00000000  00000000  000591e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bbf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  0010bc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800355c 	.word	0x0800355c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800355c 	.word	0x0800355c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd38 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f844 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9e4 	bl	80005f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800022c:	f000 f98e 	bl	800054c <MX_TIM2_Init>
  MX_SPI2_Init();
 8000230:	f000 f896 	bl	8000360 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000234:	f000 f8d2 	bl	80003dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	01db      	lsls	r3, r3, #7
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <main+0x8c>)
 800023e:	2201      	movs	r2, #1
 8000240:	0019      	movs	r1, r3
 8000242:	f001 f84e 	bl	80012e2 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin, GPIO_PIN_RESET);
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	021b      	lsls	r3, r3, #8
 800024a:	4817      	ldr	r0, [pc, #92]	; (80002a8 <main+0x8c>)
 800024c:	2200      	movs	r2, #0
 800024e:	0019      	movs	r1, r3
 8000250:	f001 f847 	bl	80012e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin, GPIO_PIN_RESET);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	0059      	lsls	r1, r3, #1
 8000258:	23a0      	movs	r3, #160	; 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2200      	movs	r2, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f001 f83f 	bl	80012e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin, GPIO_PIN_RESET);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	019b      	lsls	r3, r3, #6
 8000268:	480f      	ldr	r0, [pc, #60]	; (80002a8 <main+0x8c>)
 800026a:	2200      	movs	r2, #0
 800026c:	0019      	movs	r1, r3
 800026e:	f001 f838 	bl	80012e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin, GPIO_PIN_RESET);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	0219      	lsls	r1, r3, #8
 8000276:	23a0      	movs	r3, #160	; 0xa0
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2200      	movs	r2, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f830 	bl	80012e2 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <main+0x90>)
 8000284:	2108      	movs	r1, #8
 8000286:	0018      	movs	r0, r3
 8000288:	f002 f960 	bl	800254c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <main+0x90>)
 800028e:	210c      	movs	r1, #12
 8000290:	0018      	movs	r0, r3
 8000292:	f002 f95b 	bl	800254c <HAL_TIM_PWM_Start>

  htim1.Instance->CCR3 = 30;
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x90>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	221e      	movs	r2, #30
 800029c:	63da      	str	r2, [r3, #60]	; 0x3c
  htim1.Instance->CCR4 = 30;
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0x90>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	221e      	movs	r2, #30
 80002a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x8a>
 80002a8:	50000400 	.word	0x50000400
 80002ac:	2000008c 	.word	0x2000008c

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b095      	sub	sp, #84	; 0x54
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2414      	movs	r4, #20
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	233c      	movs	r3, #60	; 0x3c
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f003 f943 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	0018      	movs	r0, r3
 80002ca:	2310      	movs	r3, #16
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f003 f93c 	bl	800354c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f865 	bl	80013a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2201      	movs	r2, #1
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2280      	movs	r2, #128	; 0x80
 80002e8:	0252      	lsls	r2, r2, #9
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2203      	movs	r2, #3
 80002f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2208      	movs	r2, #8
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0292      	lsls	r2, r2, #10
 800030c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2280      	movs	r2, #128	; 0x80
 8000312:	0492      	lsls	r2, r2, #18
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0592      	lsls	r2, r2, #22
 800031c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f881 	bl	8001428 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800032a:	f000 fb12 	bl	8000952 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2202      	movs	r2, #2
 8000338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	0018      	movs	r0, r3
 800034c:	f001 fbd2 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000354:	f000 fafd 	bl	8000952 <Error_Handler>
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b015      	add	sp, #84	; 0x54
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_SPI2_Init+0x74>)
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <MX_SPI2_Init+0x78>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_SPI2_Init+0x74>)
 800036c:	2282      	movs	r2, #130	; 0x82
 800036e:	0052      	lsls	r2, r2, #1
 8000370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_SPI2_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_SPI2_Init+0x74>)
 800037a:	22e0      	movs	r2, #224	; 0xe0
 800037c:	00d2      	lsls	r2, r2, #3
 800037e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_SPI2_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_SPI2_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_SPI2_Init+0x74>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_SPI2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_SPI2_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003ae:	2207      	movs	r2, #7
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003ba:	2208      	movs	r2, #8
 80003bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <MX_SPI2_Init+0x74>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 ff5b 	bl	800227c <HAL_SPI_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 fac2 	bl	8000952 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000028 	.word	0x20000028
 80003d8:	40003800 	.word	0x40003800

080003dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b098      	sub	sp, #96	; 0x60
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	2354      	movs	r3, #84	; 0x54
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	230c      	movs	r3, #12
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 f8ad 	bl	800354c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f2:	2338      	movs	r3, #56	; 0x38
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	0018      	movs	r0, r3
 80003f8:	231c      	movs	r3, #28
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f003 f8a5 	bl	800354c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	2334      	movs	r3, #52	; 0x34
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f003 f89e 	bl	800354c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000410:	4b4b      	ldr	r3, [pc, #300]	; (8000540 <MX_TIM1_Init+0x164>)
 8000412:	4a4c      	ldr	r2, [pc, #304]	; (8000544 <MX_TIM1_Init+0x168>)
 8000414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400-1;
 8000416:	4b4a      	ldr	r3, [pc, #296]	; (8000540 <MX_TIM1_Init+0x164>)
 8000418:	4a4b      	ldr	r2, [pc, #300]	; (8000548 <MX_TIM1_Init+0x16c>)
 800041a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b48      	ldr	r3, [pc, #288]	; (8000540 <MX_TIM1_Init+0x164>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000422:	4b47      	ldr	r3, [pc, #284]	; (8000540 <MX_TIM1_Init+0x164>)
 8000424:	2263      	movs	r2, #99	; 0x63
 8000426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b45      	ldr	r3, [pc, #276]	; (8000540 <MX_TIM1_Init+0x164>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042e:	4b44      	ldr	r3, [pc, #272]	; (8000540 <MX_TIM1_Init+0x164>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000434:	4b42      	ldr	r3, [pc, #264]	; (8000540 <MX_TIM1_Init+0x164>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <MX_TIM1_Init+0x164>)
 800043c:	0018      	movs	r0, r3
 800043e:	f002 f82d 	bl	800249c <HAL_TIM_PWM_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 fa84 	bl	8000952 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044a:	2154      	movs	r1, #84	; 0x54
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800045e:	187a      	adds	r2, r7, r1
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <MX_TIM1_Init+0x164>)
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f002 ff31 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800046e:	f000 fa70 	bl	8000952 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000472:	2138      	movs	r1, #56	; 0x38
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2260      	movs	r2, #96	; 0x60
 8000478:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	4b27      	ldr	r3, [pc, #156]	; (8000540 <MX_TIM1_Init+0x164>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 f941 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80004ae:	f000 fa50 	bl	8000952 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004b2:	2338      	movs	r3, #56	; 0x38
 80004b4:	18f9      	adds	r1, r7, r3
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <MX_TIM1_Init+0x164>)
 80004b8:	220c      	movs	r2, #12
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 f936 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80004c4:	f000 fa45 	bl	8000952 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0192      	lsls	r2, r2, #6
 80004ec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	0492      	lsls	r2, r2, #18
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051a:	1d3a      	adds	r2, r7, #4
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_TIM1_Init+0x164>)
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f002 ff49 	bl	80033b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800052a:	f000 fa12 	bl	8000952 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <MX_TIM1_Init+0x164>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fb11 	bl	8000b58 <HAL_TIM_MspPostInit>

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b018      	add	sp, #96	; 0x60
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	2000008c 	.word	0x2000008c
 8000544:	40012c00 	.word	0x40012c00
 8000548:	000018ff 	.word	0x000018ff

0800054c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000552:	2310      	movs	r3, #16
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	0018      	movs	r0, r3
 8000558:	2310      	movs	r3, #16
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fff5 	bl	800354c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	0018      	movs	r0, r3
 8000566:	230c      	movs	r3, #12
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f002 ffee 	bl	800354c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_TIM2_Init+0xa4>)
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	05d2      	lsls	r2, r2, #23
 8000576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <MX_TIM2_Init+0xa4>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <MX_TIM2_Init+0xa4>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_TIM2_Init+0xa4>)
 8000586:	2201      	movs	r2, #1
 8000588:	4252      	negs	r2, r2
 800058a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_TIM2_Init+0xa4>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_TIM2_Init+0xa4>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_TIM2_Init+0xa4>)
 800059a:	0018      	movs	r0, r3
 800059c:	f001 ff26 	bl	80023ec <HAL_TIM_Base_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005a4:	f000 f9d5 	bl	8000952 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a8:	2110      	movs	r1, #16
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	0152      	lsls	r2, r2, #5
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_TIM2_Init+0xa4>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 f9ad 	bl	8002918 <HAL_TIM_ConfigClockSource>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005c2:	f000 f9c6 	bl	8000952 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d2:	1d3a      	adds	r2, r7, #4
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_TIM2_Init+0xa4>)
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f002 fe77 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80005e2:	f000 f9b6 	bl	8000952 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b008      	add	sp, #32
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	200000d8 	.word	0x200000d8

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b08b      	sub	sp, #44	; 0x2c
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	2414      	movs	r4, #20
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	0018      	movs	r0, r3
 8000600:	2314      	movs	r3, #20
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f002 ffa1 	bl	800354c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <MX_GPIO_Init+0x154>)
 800060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060e:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <MX_GPIO_Init+0x154>)
 8000610:	2120      	movs	r1, #32
 8000612:	430a      	orrs	r2, r1
 8000614:	635a      	str	r2, [r3, #52]	; 0x34
 8000616:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <MX_GPIO_Init+0x154>)
 8000618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061a:	2220      	movs	r2, #32
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b49      	ldr	r3, [pc, #292]	; (8000748 <MX_GPIO_Init+0x154>)
 8000624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000626:	4b48      	ldr	r3, [pc, #288]	; (8000748 <MX_GPIO_Init+0x154>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
 800062e:	4b46      	ldr	r3, [pc, #280]	; (8000748 <MX_GPIO_Init+0x154>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b43      	ldr	r3, [pc, #268]	; (8000748 <MX_GPIO_Init+0x154>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_GPIO_Init+0x154>)
 8000640:	2102      	movs	r1, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_GPIO_Init+0x154>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2202      	movs	r2, #2
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_GPIO_Init+0x154>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b3c      	ldr	r3, [pc, #240]	; (8000748 <MX_GPIO_Init+0x154>)
 8000658:	2108      	movs	r1, #8
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x154>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2208      	movs	r2, #8
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|AI1_Pin|STBY_Pin
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4837      	ldr	r0, [pc, #220]	; (800074c <MX_GPIO_Init+0x158>)
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	f000 fe35 	bl	80012e2 <HAL_GPIO_WritePin>
                          |BI1_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BI2_Pin|AI2_Pin, GPIO_PIN_RESET);
 8000678:	2381      	movs	r3, #129	; 0x81
 800067a:	0219      	lsls	r1, r3, #8
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2200      	movs	r2, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fe2d 	bl	80012e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 AI1_Pin STBY_Pin
                           BI1_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|AI1_Pin|STBY_Pin
 8000688:	193b      	adds	r3, r7, r4
 800068a:	22fa      	movs	r2, #250	; 0xfa
 800068c:	0212      	lsls	r2, r2, #8
 800068e:	601a      	str	r2, [r3, #0]
                          |BI1_Pin|LED_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <MX_GPIO_Init+0x158>)
 80006a6:	0019      	movs	r1, r3
 80006a8:	0010      	movs	r0, r2
 80006aa:	f000 fc91 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BI2_Pin AI2_Pin */
  GPIO_InitStruct.Pin = BI2_Pin|AI2_Pin;
 80006ae:	0021      	movs	r1, r4
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2281      	movs	r2, #129	; 0x81
 80006b4:	0212      	lsls	r2, r2, #8
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	000c      	movs	r4, r1
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2201      	movs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	193a      	adds	r2, r7, r4
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fc7b 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE2_Pin LINE1_Pin */
  GPIO_InitStruct.Pin = LINE2_Pin|LINE1_Pin;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2284      	movs	r2, #132	; 0x84
 80006e6:	0392      	lsls	r2, r2, #14
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f0:	000c      	movs	r4, r1
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <MX_GPIO_Init+0x15c>)
 80006f6:	0019      	movs	r1, r3
 80006f8:	0010      	movs	r0, r2
 80006fa:	f000 fc69 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIST3_Pin DIST2_Pin DIST1_Pin */
  GPIO_InitStruct.Pin = DIST3_Pin|DIST2_Pin|DIST1_Pin;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2270      	movs	r2, #112	; 0x70
 8000704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2288      	movs	r2, #136	; 0x88
 800070a:	0352      	lsls	r2, r2, #13
 800070c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	187b      	adds	r3, r7, r1
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <MX_GPIO_Init+0x158>)
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f000 fc58 	bl	8000fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	2006      	movs	r0, #6
 8000726:	f000 fc21 	bl	8000f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800072a:	2006      	movs	r0, #6
 800072c:	f000 fc33 	bl	8000f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	2007      	movs	r0, #7
 8000736:	f000 fc19 	bl	8000f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fc2b 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b00b      	add	sp, #44	; 0x2c
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	50000400 	.word	0x50000400
 8000750:	50000c00 	.word	0x50000c00

08000754 <bot_straight>:

/* USER CODE BEGIN 4 */
void bot_straight(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin, GPIO_PIN_RESET);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <bot_straight+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	0019      	movs	r1, r3
 8000762:	f000 fdbe 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin, GPIO_PIN_SET);
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	0059      	lsls	r1, r3, #1
 800076a:	23a0      	movs	r3, #160	; 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	2201      	movs	r2, #1
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fdb6 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin, GPIO_PIN_SET);
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	4808      	ldr	r0, [pc, #32]	; (800079c <bot_straight+0x48>)
 800077c:	2201      	movs	r2, #1
 800077e:	0019      	movs	r1, r3
 8000780:	f000 fdaf 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin, GPIO_PIN_RESET);
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	0219      	lsls	r1, r3, #8
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fda7 	bl	80012e2 <HAL_GPIO_WritePin>
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	50000400 	.word	0x50000400

080007a0 <bot_right>:

void bot_right(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin, GPIO_PIN_RESET);
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <bot_right+0x48>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	0019      	movs	r1, r3
 80007ae:	f000 fd98 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin, GPIO_PIN_SET);
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	0059      	lsls	r1, r3, #1
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fd90 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin, GPIO_PIN_RESET);
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <bot_right+0x48>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	0019      	movs	r1, r3
 80007cc:	f000 fd89 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin, GPIO_PIN_SET);
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	0219      	lsls	r1, r3, #8
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2201      	movs	r2, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fd81 	bl	80012e2 <HAL_GPIO_WritePin>
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	50000400 	.word	0x50000400

080007ec <bot_left>:

void bot_left(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin, GPIO_PIN_SET);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <bot_left+0x48>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	0019      	movs	r1, r3
 80007fa:	f000 fd72 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin, GPIO_PIN_RESET);
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	0059      	lsls	r1, r3, #1
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2200      	movs	r2, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fd6a 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin, GPIO_PIN_SET);
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <bot_left+0x48>)
 8000814:	2201      	movs	r2, #1
 8000816:	0019      	movs	r1, r3
 8000818:	f000 fd63 	bl	80012e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin, GPIO_PIN_RESET);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	0219      	lsls	r1, r3, #8
 8000820:	23a0      	movs	r3, #160	; 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	2200      	movs	r2, #0
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fd5b 	bl	80012e2 <HAL_GPIO_WritePin>
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	50000400 	.word	0x50000400

08000838 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	801a      	strh	r2, [r3, #0]
	int counter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == DIST1_Pin) {
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b40      	cmp	r3, #64	; 0x40
 800084e:	d124      	bne.n	800089a <HAL_GPIO_EXTI_Rising_Callback+0x62>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 fd5f 	bl	800131c <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(DIST2_GPIO_Port, DIST2_Pin)) {
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fd20 	bl	80012a8 <HAL_GPIO_ReadPin>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d00e      	beq.n	800088a <HAL_GPIO_EXTI_Rising_Callback+0x52>
			bot_straight();
 800086c:	f7ff ff72 	bl	8000754 <bot_straight>
				}
				bot_left();
			}
		}
	}
}
 8000870:	e04a      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
				counter++;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
				if(counter > 100000) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4a26      	ldr	r2, [pc, #152]	; (8000914 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 800087c:	4293      	cmp	r3, r2
 800087e:	dd02      	ble.n	8000886 <HAL_GPIO_EXTI_Rising_Callback+0x4e>
					bot_straight();
 8000880:	f7ff ff68 	bl	8000754 <bot_straight>
					break;
 8000884:	e040      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
				bot_right();
 8000886:	f7ff ff8b 	bl	80007a0 <bot_right>
			while(!HAL_GPIO_ReadPin(DIST2_GPIO_Port, DIST2_Pin)) {
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 800088c:	2120      	movs	r1, #32
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fd0a 	bl	80012a8 <HAL_GPIO_ReadPin>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d0ec      	beq.n	8000872 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
}
 8000898:	e036      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
	else if(GPIO_Pin == DIST2_Pin) {
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b20      	cmp	r3, #32
 80008a0:	d109      	bne.n	80008b6 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80008a8:	0019      	movs	r1, r3
 80008aa:	0010      	movs	r0, r2
 80008ac:	f000 fd36 	bl	800131c <HAL_GPIO_TogglePin>
		bot_straight();
 80008b0:	f7ff ff50 	bl	8000754 <bot_straight>
}
 80008b4:	e028      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
	else if(GPIO_Pin == DIST3_Pin) {
 80008b6:	1dbb      	adds	r3, r7, #6
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d124      	bne.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
		HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80008c4:	0019      	movs	r1, r3
 80008c6:	0010      	movs	r0, r2
 80008c8:	f000 fd28 	bl	800131c <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(DIST2_GPIO_Port, DIST2_Pin)) {
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80008ce:	2120      	movs	r1, #32
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fce9 	bl	80012a8 <HAL_GPIO_ReadPin>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d00e      	beq.n	80008f8 <HAL_GPIO_EXTI_Rising_Callback+0xc0>
			bot_straight();
 80008da:	f7ff ff3b 	bl	8000754 <bot_straight>
}
 80008de:	e013      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
				counter++;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
				if(counter > 100000) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_GPIO_EXTI_Rising_Callback+0xdc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	dd02      	ble.n	80008f4 <HAL_GPIO_EXTI_Rising_Callback+0xbc>
					bot_straight();
 80008ee:	f7ff ff31 	bl	8000754 <bot_straight>
					break;
 80008f2:	e009      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
				bot_left();
 80008f4:	f7ff ff7a 	bl	80007ec <bot_left>
			while(!HAL_GPIO_ReadPin(DIST2_GPIO_Port, DIST2_Pin)) {
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_GPIO_EXTI_Rising_Callback+0xd8>)
 80008fa:	2120      	movs	r1, #32
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fcd3 	bl	80012a8 <HAL_GPIO_ReadPin>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d0ec      	beq.n	80008e0 <HAL_GPIO_EXTI_Rising_Callback+0xa8>
}
 8000906:	e7ff      	b.n	8000908 <HAL_GPIO_EXTI_Rising_Callback+0xd0>
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b004      	add	sp, #16
 800090e:	bd80      	pop	{r7, pc}
 8000910:	50000400 	.word	0x50000400
 8000914:	000186a0 	.word	0x000186a0

08000918 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	0002      	movs	r2, r0
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == LINE1_Pin) {
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	2b08      	cmp	r3, #8
 800092a:	d107      	bne.n	800093c <HAL_GPIO_EXTI_Falling_Callback+0x24>
		bot_left();
 800092c:	f7ff ff5e 	bl	80007ec <bot_left>
		HAL_Delay(200);
 8000930:	20c8      	movs	r0, #200	; 0xc8
 8000932:	f000 fa35 	bl	8000da0 <HAL_Delay>
		bot_straight();
 8000936:	f7ff ff0d 	bl	8000754 <bot_straight>
	} else {
		bot_right();
		HAL_Delay(200);
		bot_straight();
	}
}
 800093a:	e006      	b.n	800094a <HAL_GPIO_EXTI_Falling_Callback+0x32>
		bot_right();
 800093c:	f7ff ff30 	bl	80007a0 <bot_right>
		HAL_Delay(200);
 8000940:	20c8      	movs	r0, #200	; 0xc8
 8000942:	f000 fa2d 	bl	8000da0 <HAL_Delay>
		bot_straight();
 8000946:	f7ff ff05 	bl	8000754 <bot_straight>
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}

08000952 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000956:	b672      	cpsid	i
}
 8000958:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095a:	e7fe      	b.n	800095a <Error_Handler+0x8>

0800095c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_MspInit+0x4c>)
 8000964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	2101      	movs	r1, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	641a      	str	r2, [r3, #64]	; 0x40
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x4c>)
 800097c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_MspInit+0x4c>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0549      	lsls	r1, r1, #21
 8000984:	430a      	orrs	r2, r1
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_MspInit+0x4c>)
 800098a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	055b      	lsls	r3, r3, #21
 8000990:	4013      	ands	r3, r2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000996:	23c0      	movs	r3, #192	; 0xc0
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fa24 	bl	8000de8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	2414      	movs	r4, #20
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 fdc4 	bl	800354c <memset>
  if(hspi->Instance==SPI2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a37      	ldr	r2, [pc, #220]	; (8000aa8 <HAL_SPI_MspInit+0xfc>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d168      	bne.n	8000aa0 <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	01c9      	lsls	r1, r1, #7
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	01db      	lsls	r3, r3, #7
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_SPI_MspInit+0x100>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_SPI_MspInit+0x100>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <HAL_SPI_MspInit+0x100>)
 8000a08:	2102      	movs	r1, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <HAL_SPI_MspInit+0x100>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	2202      	movs	r2, #2
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2202      	movs	r2, #2
 8000a24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	193a      	adds	r2, r7, r4
 8000a3a:	23a0      	movs	r3, #160	; 0xa0
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fac5 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2210      	movs	r2, #16
 8000a4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2202      	movs	r2, #2
 8000a50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2201      	movs	r2, #1
 8000a62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	193a      	adds	r2, r7, r4
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 faaf 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a72:	0021      	movs	r1, r4
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2205      	movs	r2, #5
 8000a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_SPI_MspInit+0x104>)
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	f000 fa98 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b00b      	add	sp, #44	; 0x2c
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	40003800 	.word	0x40003800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	50000400 	.word	0x50000400

08000ab4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b097      	sub	sp, #92	; 0x5c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	240c      	movs	r4, #12
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	234c      	movs	r3, #76	; 0x4c
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f002 fd40 	bl	800354c <memset>
  if(htim_pwm->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_TIM_PWM_MspInit+0x64>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d11c      	bne.n	8000b10 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	0392      	lsls	r2, r2, #14
 8000adc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f98c 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8000af0:	f7ff ff2f 	bl	8000952 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_TIM_PWM_MspInit+0x68>)
 8000af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_TIM_PWM_MspInit+0x68>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	0109      	lsls	r1, r1, #4
 8000afe:	430a      	orrs	r2, r1
 8000b00:	641a      	str	r2, [r3, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_TIM_PWM_MspInit+0x68>)
 8000b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b017      	add	sp, #92	; 0x5c
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10b      	bne.n	8000b4c <HAL_TIM_Base_MspInit+0x2c>
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_TIM_Base_MspInit+0x34>)
 8000b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_TIM_Base_MspInit+0x34>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_TIM_Base_MspInit+0x34>)
 8000b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	240c      	movs	r4, #12
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f002 fcee 	bl	800354c <memset>
  if(htim->Instance==TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_TIM_MspPostInit+0x74>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d123      	bne.n	8000bc2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_TIM_MspPostInit+0x78>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_TIM_MspPostInit+0x78>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_TIM_MspPostInit+0x78>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	22c0      	movs	r2, #192	; 0xc0
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	0021      	movs	r1, r4
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	187a      	adds	r2, r7, r1
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fa07 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b009      	add	sp, #36	; 0x24
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40012c00 	.word	0x40012c00
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8b6 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LINE2_Pin);
 8000c06:	2004      	movs	r0, #4
 8000c08:	f000 fba4 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LINE1_Pin);
 8000c0c:	2008      	movs	r0, #8
 8000c0e:	f000 fba1 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIST3_Pin);
 8000c1c:	2010      	movs	r0, #16
 8000c1e:	f000 fb99 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIST2_Pin);
 8000c22:	2020      	movs	r0, #32
 8000c24:	f000 fb96 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIST1_Pin);
 8000c28:	2040      	movs	r0, #64	; 0x40
 8000c2a:	f000 fb93 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fff6 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c6e:	f002 fc49 	bl	8003504 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c72:	f7ff fad3 	bl	800021c <main>

08000c76 <LoopForever>:

LoopForever:
  b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c84:	08003610 	.word	0x08003610
  ldr r2, =_sbss
 8000c88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c8c:	20000128 	.word	0x20000128

08000c90 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_COMP_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Init+0x3c>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0049      	lsls	r1, r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f810 	bl	8000cd4 <HAL_InitTick>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe4c 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_InitTick+0x88>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d02b      	beq.n	8000d44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_InitTick+0x8c>)
 8000cee:	681c      	ldr	r4, [r3, #0]
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_InitTick+0x88>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	0019      	movs	r1, r3
 8000cf6:	23fa      	movs	r3, #250	; 0xfa
 8000cf8:	0098      	lsls	r0, r3, #2
 8000cfa:	f7ff fa03 	bl	8000104 <__udivsi3>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0019      	movs	r1, r3
 8000d02:	0020      	movs	r0, r4
 8000d04:	f7ff f9fe 	bl	8000104 <__udivsi3>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f953 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d112      	bne.n	8000d3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d80a      	bhi.n	8000d30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	425b      	negs	r3, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f922 	bl	8000f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_InitTick+0x90>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e00d      	b.n	8000d4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e008      	b.n	8000d4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e003      	b.n	8000d4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b005      	add	sp, #20
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	001a      	movs	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	18d2      	adds	r2, r2, r3
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000124 	.word	0x20000124

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	20000124 	.word	0x20000124

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff fff0 	bl	8000d8c <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	189b      	adds	r3, r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	f7ff ffe0 	bl	8000d8c <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	fffff9ff 	.word	0xfffff9ff

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b7f      	cmp	r3, #127	; 0x7f
 8000e26:	d809      	bhi.n	8000e3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	231f      	movs	r3, #31
 8000e30:	401a      	ands	r2, r3
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_EnableIRQ+0x30>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	4091      	lsls	r1, r2
 8000e38:	000a      	movs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5c:	d828      	bhi.n	8000eb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <__NVIC_SetPriority+0xd4>)
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	33c0      	adds	r3, #192	; 0xc0
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	589b      	ldr	r3, [r3, r2]
 8000e6e:	1dfa      	adds	r2, r7, #7
 8000e70:	7812      	ldrb	r2, [r2, #0]
 8000e72:	0011      	movs	r1, r2
 8000e74:	2203      	movs	r2, #3
 8000e76:	400a      	ands	r2, r1
 8000e78:	00d2      	lsls	r2, r2, #3
 8000e7a:	21ff      	movs	r1, #255	; 0xff
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0018      	movs	r0, r3
 8000e94:	2303      	movs	r3, #3
 8000e96:	4003      	ands	r3, r0
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9c:	481f      	ldr	r0, [pc, #124]	; (8000f1c <__NVIC_SetPriority+0xd4>)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	33c0      	adds	r3, #192	; 0xc0
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eae:	e031      	b.n	8000f14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <__NVIC_SetPriority+0xd8>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	230f      	movs	r3, #15
 8000eba:	400b      	ands	r3, r1
 8000ebc:	3b08      	subs	r3, #8
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3306      	adds	r3, #6
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	1dfa      	adds	r2, r7, #7
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	0011      	movs	r1, r2
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	00d2      	lsls	r2, r2, #3
 8000ed6:	21ff      	movs	r1, #255	; 0xff
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	43d2      	mvns	r2, r2
 8000ede:	401a      	ands	r2, r3
 8000ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	22ff      	movs	r2, #255	; 0xff
 8000ee8:	401a      	ands	r2, r3
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	4003      	ands	r3, r0
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <__NVIC_SetPriority+0xd8>)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	001c      	movs	r4, r3
 8000f00:	230f      	movs	r3, #15
 8000f02:	4023      	ands	r3, r4
 8000f04:	3b08      	subs	r3, #8
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	18c3      	adds	r3, r0, r3
 8000f10:	3304      	adds	r3, #4
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b003      	add	sp, #12
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	045b      	lsls	r3, r3, #17
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d301      	bcc.n	8000f3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e010      	b.n	8000f5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <SysTick_Config+0x44>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	3a01      	subs	r2, #1
 8000f42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	2103      	movs	r1, #3
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ff7c 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x44>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x44>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	210f      	movs	r1, #15
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	1c02      	adds	r2, r0, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff33 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ffaf 	bl	8000f24 <SysTick_Config>
 8000fc6:	0003      	movs	r3, r0
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	e14d      	b.n	800127c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x28>
 8000ff6:	e13e      	b.n	8001276 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x40>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	4013      	ands	r3, r2
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	409a      	lsls	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	2201      	movs	r2, #1
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2203      	movs	r2, #3
 8001078:	4013      	ands	r3, r2
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	58d3      	ldr	r3, [r2, r3]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2207      	movs	r2, #7
 80010cc:	4013      	ands	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2107      	movs	r1, #7
 80010e6:	400b      	ands	r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	6939      	ldr	r1, [r7, #16]
 8001100:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	23c0      	movs	r3, #192	; 0xc0
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d100      	bne.n	8001144 <HAL_GPIO_Init+0x174>
 8001142:	e098      	b.n	8001276 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3318      	adds	r3, #24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	589b      	ldr	r3, [r3, r2]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2203      	movs	r2, #3
 8001156:	4013      	ands	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	220f      	movs	r2, #15
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	23a0      	movs	r3, #160	; 0xa0
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	429a      	cmp	r2, r3
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x1d6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a48      	ldr	r2, [pc, #288]	; (8001298 <HAL_GPIO_Init+0x2c8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1d2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_GPIO_Init+0x2cc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1ce>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1ca>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <HAL_GPIO_Init+0x2d4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1c6>
 8001192:	2304      	movs	r3, #4
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x1d8>
 8001196:	2305      	movs	r3, #5
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x1d8>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x1d8>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x1d8>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x1d8>
 80011a6:	2300      	movs	r3, #0
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	2103      	movs	r1, #3
 80011ac:	400a      	ands	r2, r1
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	4093      	lsls	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011b8:	4936      	ldr	r1, [pc, #216]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3318      	adds	r3, #24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011c6:	4a33      	ldr	r2, [pc, #204]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	58d3      	ldr	r3, [r2, r3]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ec:	4929      	ldr	r1, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80011f4:	4a27      	ldr	r2, [pc, #156]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 80011f6:	2384      	movs	r3, #132	; 0x84
 80011f8:	58d3      	ldr	r3, [r2, r3]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800121a:	491e      	ldr	r1, [pc, #120]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 800121c:	2284      	movs	r2, #132	; 0x84
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	035b      	lsls	r3, r3, #13
 800123a:	4013      	ands	r3, r2
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	039b      	lsls	r3, r3, #14
 8001264:	4013      	ands	r3, r2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_GPIO_Init+0x2c4>)
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	1e13      	subs	r3, r2, #0
 8001286:	d000      	beq.n	800128a <HAL_GPIO_Init+0x2ba>
 8001288:	e6aa      	b.n	8000fe0 <HAL_GPIO_Init+0x10>
  }
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b006      	add	sp, #24
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021800 	.word	0x40021800
 8001298:	50000400 	.word	0x50000400
 800129c:	50000800 	.word	0x50000800
 80012a0:	50000c00 	.word	0x50000c00
 80012a4:	50001000 	.word	0x50001000

080012a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	000a      	movs	r2, r1
 80012b2:	1cbb      	adds	r3, r7, #2
 80012b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	1cba      	adds	r2, r7, #2
 80012bc:	8812      	ldrh	r2, [r2, #0]
 80012be:	4013      	ands	r3, r2
 80012c0:	d004      	beq.n	80012cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e003      	b.n	80012d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	0008      	movs	r0, r1
 80012ec:	0011      	movs	r1, r2
 80012ee:	1cbb      	adds	r3, r7, #2
 80012f0:	1c02      	adds	r2, r0, #0
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	1c7b      	adds	r3, r7, #1
 80012f6:	1c0a      	adds	r2, r1, #0
 80012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fa:	1c7b      	adds	r3, r7, #1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001302:	1cbb      	adds	r3, r7, #2
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130a:	e003      	b.n	8001314 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130c:	1cbb      	adds	r3, r7, #2
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001330:	1cbb      	adds	r3, r7, #2
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43db      	mvns	r3, r3
 800133e:	1cb9      	adds	r1, r7, #2
 8001340:	8809      	ldrh	r1, [r1, #0]
 8001342:	400b      	ands	r3, r1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b004      	add	sp, #16
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	0002      	movs	r2, r0
 800135c:	1dbb      	adds	r3, r7, #6
 800135e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	1dba      	adds	r2, r7, #6
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4013      	ands	r3, r2
 800136a:	d008      	beq.n	800137e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800136e:	1dba      	adds	r2, r7, #6
 8001370:	8812      	ldrh	r2, [r2, #0]
 8001372:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fa5d 	bl	8000838 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	1dba      	adds	r2, r7, #6
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	4013      	ands	r3, r2
 8001388:	d008      	beq.n	800139c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800138c:	1dba      	adds	r2, r7, #6
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fabe 	bl	8000918 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021800 	.word	0x40021800

080013a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d11f      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	0013      	movs	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	189b      	adds	r3, r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4912      	ldr	r1, [pc, #72]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f7fe fe92 	bl	8000104 <__udivsi3>
 80013e0:	0003      	movs	r3, r0
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e6:	e008      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e009      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	401a      	ands	r2, r3
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	429a      	cmp	r2, r3
 800140a:	d0ed      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b004      	add	sp, #16
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40007000 	.word	0x40007000
 800141c:	fffff9ff 	.word	0xfffff9ff
 8001420:	20000000 	.word	0x20000000
 8001424:	000f4240 	.word	0x000f4240

08001428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fb56 	bl	8001ae8 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d100      	bne.n	8001448 <HAL_RCC_OscConfig+0x20>
 8001446:	e07d      	b.n	8001544 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4bc3      	ldr	r3, [pc, #780]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2238      	movs	r2, #56	; 0x38
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4bc1      	ldr	r3, [pc, #772]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0x40>
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d002      	beq.n	800146e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4bba      	ldr	r3, [pc, #744]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x11a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d15f      	bne.n	8001542 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f000 fb30 	bl	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	429a      	cmp	r2, r3
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_OscConfig+0x7c>
 8001494:	4bb0      	ldr	r3, [pc, #704]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4baf      	ldr	r3, [pc, #700]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0249      	lsls	r1, r1, #9
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e020      	b.n	80014e6 <HAL_RCC_OscConfig+0xbe>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	23a0      	movs	r3, #160	; 0xa0
 80014aa:	02db      	lsls	r3, r3, #11
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d10e      	bne.n	80014ce <HAL_RCC_OscConfig+0xa6>
 80014b0:	4ba9      	ldr	r3, [pc, #676]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	02c9      	lsls	r1, r1, #11
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	4ba6      	ldr	r3, [pc, #664]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4ba5      	ldr	r3, [pc, #660]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0249      	lsls	r1, r1, #9
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0xbe>
 80014ce:	4ba2      	ldr	r3, [pc, #648]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014d4:	49a1      	ldr	r1, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x334>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4b9f      	ldr	r3, [pc, #636]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b9e      	ldr	r3, [pc, #632]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80014e0:	499f      	ldr	r1, [pc, #636]	; (8001760 <HAL_RCC_OscConfig+0x338>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d014      	beq.n	8001518 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc4d 	bl	8000d8c <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fc48 	bl	8000d8c <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e2ee      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4b93      	ldr	r3, [pc, #588]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	4013      	ands	r3, r2
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xd0>
 8001516:	e015      	b.n	8001544 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc38 	bl	8000d8c <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fc33 	bl	8000d8c <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e2d9      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0xfa>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d100      	bne.n	8001550 <HAL_RCC_OscConfig+0x128>
 800154e:	e099      	b.n	8001684 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2238      	movs	r2, #56	; 0x38
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2203      	movs	r2, #3
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0x148>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d002      	beq.n	8001576 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d135      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4013      	ands	r3, r2
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x166>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e2ac      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a74      	ldr	r2, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 8001594:	4013      	ands	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015be:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0adb      	lsrs	r3, r3, #11
 80015c4:	2207      	movs	r2, #7
 80015c6:	4013      	ands	r3, r2
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x344>)
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x348>)
 80015ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x34c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fb7d 	bl	8000cd4 <HAL_InitTick>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d051      	beq.n	8001682 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e282      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d030      	beq.n	800164c <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x340>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b56      	ldr	r3, [pc, #344]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fbbe 	bl	8000d8c <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fbb9 	bl	8000d8c <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e25f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x33c>)
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	021a      	lsls	r2, r3, #8
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001652:	4949      	ldr	r1, [pc, #292]	; (8001778 <HAL_RCC_OscConfig+0x350>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb98 	bl	8000d8c <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fb93 	bl	8000d8c <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e239      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4013      	ands	r3, r2
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x23a>
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001682:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	4013      	ands	r3, r2
 800168c:	d047      	beq.n	800171e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2238      	movs	r2, #56	; 0x38
 8001694:	4013      	ands	r3, r2
 8001696:	2b18      	cmp	r3, #24
 8001698:	d10a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x2f6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d138      	bne.n	800171e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e21b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d019      	beq.n	80016ec <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb62 	bl	8000d8c <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb5d 	bl	8000d8c <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e203      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f1      	beq.n	80016ce <HAL_RCC_OscConfig+0x2a6>
 80016ea:	e018      	b.n	800171e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb48 	bl	8000d8c <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fb43 	bl	8000d8c <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1e9      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d1f1      	bne.n	8001702 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2204      	movs	r2, #4
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x302>
 8001728:	e0c6      	b.n	80018b8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172a:	231f      	movs	r3, #31
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	2b20      	cmp	r3, #32
 800173c:	d11e      	bne.n	800177c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x330>)
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x322>
 8001748:	e0b6      	b.n	80018b8 <HAL_RCC_OscConfig+0x490>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d000      	beq.n	8001754 <HAL_RCC_OscConfig+0x32c>
 8001752:	e0b1      	b.n	80018b8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e1c7      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
 8001758:	40021000 	.word	0x40021000
 800175c:	fffeffff 	.word	0xfffeffff
 8001760:	fffbffff 	.word	0xfffbffff
 8001764:	ffff80ff 	.word	0xffff80ff
 8001768:	ffffc7ff 	.word	0xffffc7ff
 800176c:	00f42400 	.word	0x00f42400
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004
 8001778:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800177c:	4bb8      	ldr	r3, [pc, #736]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800177e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	4013      	ands	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x364>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x366>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d011      	beq.n	80017b6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4bb3      	ldr	r3, [pc, #716]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001796:	4bb2      	ldr	r3, [pc, #712]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a0:	4baf      	ldr	r3, [pc, #700]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017ae:	231f      	movs	r3, #31
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b6:	4bab      	ldr	r3, [pc, #684]	; (8001a64 <HAL_RCC_OscConfig+0x63c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	d11a      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c2:	4ba8      	ldr	r3, [pc, #672]	; (8001a64 <HAL_RCC_OscConfig+0x63c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4ba7      	ldr	r3, [pc, #668]	; (8001a64 <HAL_RCC_OscConfig+0x63c>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0049      	lsls	r1, r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fadc 	bl	8000d8c <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fad7 	bl	8000d8c <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e17d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ec:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <HAL_RCC_OscConfig+0x63c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x3e6>
 8001800:	4b97      	ldr	r3, [pc, #604]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	65da      	str	r2, [r3, #92]	; 0x5c
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x420>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x408>
 8001816:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800181c:	2104      	movs	r1, #4
 800181e:	430a      	orrs	r2, r1
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
 8001822:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001826:	4b8e      	ldr	r3, [pc, #568]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x420>
 8001830:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001834:	4b8a      	ldr	r3, [pc, #552]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	65da      	str	r2, [r3, #92]	; 0x5c
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800183e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001840:	4b87      	ldr	r3, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001842:	2104      	movs	r1, #4
 8001844:	438a      	bics	r2, r1
 8001846:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fa9c 	bl	8000d8c <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa97 	bl	8000d8c <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a80      	ldr	r2, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x640>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e13c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x432>
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa87 	bl	8000d8c <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fa82 	bl	8000d8c <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x640>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e127      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	4b71      	ldr	r3, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80018ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80018b2:	496e      	ldr	r1, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x644>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2220      	movs	r2, #32
 80018be:	4013      	ands	r3, r2
 80018c0:	d039      	beq.n	8001936 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01b      	beq.n	8001902 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	03c9      	lsls	r1, r1, #15
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa58 	bl	8000d8c <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e2:	f7ff fa53 	bl	8000d8c <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0f9      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	4013      	ands	r3, r2
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x4ba>
 8001900:	e019      	b.n	8001936 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001902:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001908:	4959      	ldr	r1, [pc, #356]	; (8001a70 <HAL_RCC_OscConfig+0x648>)
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fa3d 	bl	8000d8c <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001918:	f7ff fa38 	bl	8000d8c <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0de      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	4013      	ands	r3, r2
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d100      	bne.n	8001940 <HAL_RCC_OscConfig+0x518>
 800193e:	e0d2      	b.n	8001ae6 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2238      	movs	r2, #56	; 0x38
 8001946:	4013      	ands	r3, r2
 8001948:	2b10      	cmp	r3, #16
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x526>
 800194c:	e081      	b.n	8001a52 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d156      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800195c:	4945      	ldr	r1, [pc, #276]	; (8001a74 <HAL_RCC_OscConfig+0x64c>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fa13 	bl	8000d8c <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fa0e 	bl	8000d8c <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0b4      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	049b      	lsls	r3, r3, #18
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198a:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <HAL_RCC_OscConfig+0x650>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	431a      	orrs	r2, r3
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0449      	lsls	r1, r1, #17
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0549      	lsls	r1, r1, #21
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f9d7 	bl	8000d8c <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f9d2 	bl	8000d8c <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x5bc>
 8001a02:	e070      	b.n	8001ae6 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a0a:	491a      	ldr	r1, [pc, #104]	; (8001a74 <HAL_RCC_OscConfig+0x64c>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a16:	2103      	movs	r1, #3
 8001a18:	438a      	bics	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a22:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x654>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f9b0 	bl	8000d8c <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f9ab 	bl	8000d8c <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e051      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x638>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x60a>
 8001a50:	e049      	b.n	8001ae6 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e044      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40007000 	.word	0x40007000
 8001a68:	00001388 	.word	0x00001388
 8001a6c:	efffffff 	.word	0xefffffff
 8001a70:	ffbfffff 	.word	0xffbfffff
 8001a74:	feffffff 	.word	0xfeffffff
 8001a78:	11c1808c 	.word	0x11c1808c
 8001a7c:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x6c8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d126      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2270      	movs	r2, #112	; 0x70
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	23fe      	movs	r3, #254	; 0xfe
 8001aa6:	01db      	lsls	r3, r3, #7
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d116      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	23f8      	movs	r3, #248	; 0xf8
 8001ab8:	039b      	lsls	r3, r3, #14
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	23e0      	movs	r3, #224	; 0xe0
 8001ac8:	051b      	lsls	r3, r3, #20
 8001aca:	401a      	ands	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	0f5b      	lsrs	r3, r3, #29
 8001ad8:	075a      	lsls	r2, r3, #29
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b008      	add	sp, #32
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0e9      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d91e      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f930 	bl	8000d8c <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f92b 	bl	8000d8c <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0ca      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d015      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2204      	movs	r2, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	d006      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b68:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	21e0      	movs	r1, #224	; 0xe0
 8001b70:	01c9      	lsls	r1, r1, #7
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	d057      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d12b      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e097      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049b      	lsls	r3, r3, #18
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d11f      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e08b      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d113      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e07f      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e074      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e06d      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2207      	movs	r2, #7
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f8ba 	bl	8000d8c <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f7ff f8b5 	bl	8000d8c <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e054      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2238      	movs	r2, #56	; 0x38
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1ec      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2207      	movs	r2, #7
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d21e      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2207      	movs	r2, #7
 8001c58:	4393      	bics	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f892 	bl	8000d8c <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f88d 	bl	8000d8c <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e02c      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2207      	movs	r2, #7
 8001c88:	4013      	ands	r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_RCC_ClockConfig+0x200>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cae:	f000 f829 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cb2:	0001      	movs	r1, r0
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	220f      	movs	r2, #15
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x204>)
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	000a      	movs	r2, r1
 8001cca:	40da      	lsrs	r2, r3
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x208>)
 8001cce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x20c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fffd 	bl	8000cd4 <HAL_InitTick>
 8001cda:	0003      	movs	r3, r0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	00001388 	.word	0x00001388
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	fffff0ff 	.word	0xfffff0ff
 8001cf4:	ffff8fff 	.word	0xffff8fff
 8001cf8:	08003574 	.word	0x08003574
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	4013      	ands	r3, r2
 8001d12:	d10f      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0adb      	lsrs	r3, r3, #11
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4835      	ldr	r0, [pc, #212]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d2a:	f7fe f9eb 	bl	8000104 <__udivsi3>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e05d      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2238      	movs	r2, #56	; 0x38
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e054      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d138      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	2207      	movs	r2, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	3301      	adds	r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	4823      	ldr	r0, [pc, #140]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d74:	f7fe f9c6 	bl	8000104 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	227f      	movs	r2, #127	; 0x7f
 8001d84:	4013      	ands	r3, r2
 8001d86:	434b      	muls	r3, r1
 8001d88:	617b      	str	r3, [r7, #20]
        break;
 8001d8a:	e00d      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	481c      	ldr	r0, [pc, #112]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d90:	f7fe f9b8 	bl	8000104 <__udivsi3>
 8001d94:	0003      	movs	r3, r0
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	227f      	movs	r2, #127	; 0x7f
 8001da0:	4013      	ands	r3, r2
 8001da2:	434b      	muls	r3, r1
 8001da4:	617b      	str	r3, [r7, #20]
        break;
 8001da6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0f5b      	lsrs	r3, r3, #29
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7fe f9a3 	bl	8000104 <__udivsi3>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	e015      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2238      	movs	r2, #56	; 0x38
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d103      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b18      	cmp	r3, #24
 8001de2:	d103      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001de4:	23fa      	movs	r3, #250	; 0xfa
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e001      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b006      	add	sp, #24
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	00f42400 	.word	0x00f42400

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e0c:	2313      	movs	r3, #19
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e14:	2312      	movs	r3, #18
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e28:	e0ad      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	183b      	adds	r3, r7, r0
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	055b      	lsls	r3, r3, #21
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d110      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	0549      	lsls	r1, r1, #21
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0049      	lsls	r1, r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e6e:	f7fe ff8d 	bl	8000d8c <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e76:	e00b      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7fe ff88 	bl	8000d8c <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d904      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e86:	2313      	movs	r3, #19
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
        break;
 8001e8e:	e005      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e9c:	2313      	movs	r3, #19
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d15e      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d019      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d014      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ecc:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0249      	lsls	r1, r1, #9
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001edc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ee0:	491e      	ldr	r1, [pc, #120]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff4a 	bl	8000d8c <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efc:	e00c      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe ff45 	bl	8000d8c <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d904      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f0e:	2313      	movs	r3, #19
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
            break;
 8001f16:	e004      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0ed      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f22:	2313      	movs	r3, #19
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f40:	e016      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f42:	2312      	movs	r3, #18
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2213      	movs	r2, #19
 8001f48:	18ba      	adds	r2, r7, r2
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40007000 	.word	0x40007000
 8001f58:	fffffcff 	.word	0xfffffcff
 8001f5c:	fffeffff 	.word	0xfffeffff
 8001f60:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	2312      	movs	r3, #18
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2213      	movs	r2, #19
 8001f6a:	18ba      	adds	r2, r7, r2
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f70:	2311      	movs	r3, #17
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4bb6      	ldr	r3, [pc, #728]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7e:	4bb5      	ldr	r3, [pc, #724]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f80:	49b5      	ldr	r1, [pc, #724]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f90:	4bb0      	ldr	r3, [pc, #704]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2203      	movs	r2, #3
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4bad      	ldr	r3, [pc, #692]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fae:	4ba9      	ldr	r3, [pc, #676]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4ba5      	ldr	r3, [pc, #660]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fcc:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	2230      	movs	r2, #48	; 0x30
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4b9e      	ldr	r3, [pc, #632]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fea:	4b9a      	ldr	r3, [pc, #616]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a9b      	ldr	r2, [pc, #620]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	4b96      	ldr	r3, [pc, #600]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	4013      	ands	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	4a94      	ldr	r2, [pc, #592]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	4b8e      	ldr	r3, [pc, #568]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201a:	430a      	orrs	r2, r1
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800202a:	4b8a      	ldr	r3, [pc, #552]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	4a8d      	ldr	r2, [pc, #564]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203a:	430a      	orrs	r2, r1
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4013      	ands	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800204a:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	4a86      	ldr	r2, [pc, #536]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	4b7e      	ldr	r3, [pc, #504]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800205a:	430a      	orrs	r2, r1
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2220      	movs	r2, #32
 8002064:	4013      	ands	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002068:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	4a7f      	ldr	r2, [pc, #508]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	4b77      	ldr	r3, [pc, #476]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	430a      	orrs	r2, r1
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	4013      	ands	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002086:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002096:	430a      	orrs	r2, r1
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	01db      	lsls	r3, r3, #7
 80020a2:	4013      	ands	r3, r2
 80020a4:	d015      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020a6:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	0899      	lsrs	r1, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b2:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	05db      	lsls	r3, r3, #23
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020c4:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0249      	lsls	r1, r1, #9
 80020ce:	430a      	orrs	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	031b      	lsls	r3, r3, #12
 80020da:	4013      	ands	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	4393      	bics	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	039b      	lsls	r3, r3, #14
 80020fa:	4013      	ands	r3, r2
 80020fc:	d016      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020fe:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210c:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210e:	430a      	orrs	r2, r1
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	03db      	lsls	r3, r3, #15
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0449      	lsls	r1, r1, #17
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	03db      	lsls	r3, r3, #15
 8002134:	4013      	ands	r3, r2
 8002136:	d016      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	4a4e      	ldr	r2, [pc, #312]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002148:	430a      	orrs	r2, r1
 800214a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	045b      	lsls	r3, r3, #17
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002158:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	0449      	lsls	r1, r1, #17
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4013      	ands	r3, r2
 8002170:	d014      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	2203      	movs	r2, #3
 8002178:	4393      	bics	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002182:	430a      	orrs	r2, r1
 8002184:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0249      	lsls	r1, r1, #9
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	019b      	lsls	r3, r3, #6
 80021a4:	4013      	ands	r3, r2
 80021a6:	d014      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	220c      	movs	r2, #12
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d106      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	0249      	lsls	r1, r1, #9
 80021ce:	430a      	orrs	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	045b      	lsls	r3, r3, #17
 80021da:	4013      	ands	r3, r2
 80021dc:	d016      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d106      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	0449      	lsls	r1, r1, #17
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	049b      	lsls	r3, r3, #18
 8002214:	4013      	ands	r3, r2
 8002216:	d016      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002228:	430a      	orrs	r2, r1
 800222a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	0449      	lsls	r1, r1, #17
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002246:	2312      	movs	r3, #18
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b006      	add	sp, #24
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	efffffff 	.word	0xefffffff
 800225c:	fffff3ff 	.word	0xfffff3ff
 8002260:	fffffcff 	.word	0xfffffcff
 8002264:	fff3ffff 	.word	0xfff3ffff
 8002268:	ffcfffff 	.word	0xffcfffff
 800226c:	ffffcfff 	.word	0xffffcfff
 8002270:	ffff3fff 	.word	0xffff3fff
 8002274:	ffbfffff 	.word	0xffbfffff
 8002278:	feffffff 	.word	0xfeffffff

0800227c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0a8      	b.n	80023e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	2382      	movs	r3, #130	; 0x82
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	429a      	cmp	r2, r3
 80022a0:	d009      	beq.n	80022b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	61da      	str	r2, [r3, #28]
 80022a8:	e005      	b.n	80022b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	225d      	movs	r2, #93	; 0x5d
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	225c      	movs	r2, #92	; 0x5c
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fb6a 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	225d      	movs	r2, #93	; 0x5d
 80022dc:	2102      	movs	r1, #2
 80022de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	23e0      	movs	r3, #224	; 0xe0
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d902      	bls.n	8002302 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e002      	b.n	8002308 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	015b      	lsls	r3, r3, #5
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	23f0      	movs	r3, #240	; 0xf0
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	429a      	cmp	r2, r3
 8002312:	d008      	beq.n	8002326 <HAL_SPI_Init+0xaa>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	23e0      	movs	r3, #224	; 0xe0
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	429a      	cmp	r2, r3
 800231e:	d002      	beq.n	8002326 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2382      	movs	r3, #130	; 0x82
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	2384      	movs	r3, #132	; 0x84
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	400b      	ands	r3, r1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2102      	movs	r1, #2
 8002342:	400b      	ands	r3, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2101      	movs	r1, #1
 800234c:	400b      	ands	r3, r1
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6999      	ldr	r1, [r3, #24]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	400b      	ands	r3, r1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2138      	movs	r1, #56	; 0x38
 8002362:	400b      	ands	r3, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	400b      	ands	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	0011      	movs	r1, r2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	2204      	movs	r2, #4
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2110      	movs	r1, #16
 8002394:	400b      	ands	r3, r1
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	2108      	movs	r1, #8
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	23f0      	movs	r3, #240	; 0xf0
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	400b      	ands	r3, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	0011      	movs	r1, r2
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	015b      	lsls	r3, r3, #5
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4907      	ldr	r1, [pc, #28]	; (80023e8 <HAL_SPI_Init+0x16c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	225d      	movs	r2, #93	; 0x5d
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	fffff7ff 	.word	0xfffff7ff

080023ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e04a      	b.n	8002494 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223d      	movs	r2, #61	; 0x3d
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223c      	movs	r2, #60	; 0x3c
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f7fe fb83 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223d      	movs	r2, #61	; 0x3d
 800241e:	2102      	movs	r1, #2
 8002420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	0019      	movs	r1, r3
 800242c:	0010      	movs	r0, r2
 800242e:	f000 fb3f 	bl	8002ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2248      	movs	r2, #72	; 0x48
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223e      	movs	r2, #62	; 0x3e
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223f      	movs	r2, #63	; 0x3f
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2241      	movs	r2, #65	; 0x41
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2242      	movs	r2, #66	; 0x42
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2243      	movs	r2, #67	; 0x43
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2244      	movs	r2, #68	; 0x44
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2245      	movs	r2, #69	; 0x45
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2246      	movs	r2, #70	; 0x46
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2247      	movs	r2, #71	; 0x47
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223d      	movs	r2, #61	; 0x3d
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e04a      	b.n	8002544 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	223d      	movs	r2, #61	; 0x3d
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	223c      	movs	r2, #60	; 0x3c
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fe faf5 	bl	8000ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223d      	movs	r2, #61	; 0x3d
 80024ce:	2102      	movs	r1, #2
 80024d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	0019      	movs	r1, r3
 80024dc:	0010      	movs	r0, r2
 80024de:	f000 fae7 	bl	8002ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2248      	movs	r2, #72	; 0x48
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	223e      	movs	r2, #62	; 0x3e
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223f      	movs	r2, #63	; 0x3f
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2241      	movs	r2, #65	; 0x41
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2242      	movs	r2, #66	; 0x42
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2243      	movs	r2, #67	; 0x43
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2244      	movs	r2, #68	; 0x44
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2245      	movs	r2, #69	; 0x45
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2246      	movs	r2, #70	; 0x46
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2247      	movs	r2, #71	; 0x47
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223d      	movs	r2, #61	; 0x3d
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <HAL_TIM_PWM_Start+0x22>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	223e      	movs	r2, #62	; 0x3e
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	4193      	sbcs	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e037      	b.n	80025de <HAL_TIM_PWM_Start+0x92>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d108      	bne.n	8002586 <HAL_TIM_PWM_Start+0x3a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223f      	movs	r2, #63	; 0x3f
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	4193      	sbcs	r3, r2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e02b      	b.n	80025de <HAL_TIM_PWM_Start+0x92>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d108      	bne.n	800259e <HAL_TIM_PWM_Start+0x52>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	4193      	sbcs	r3, r2
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e01f      	b.n	80025de <HAL_TIM_PWM_Start+0x92>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d108      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x6a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	4193      	sbcs	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e013      	b.n	80025de <HAL_TIM_PWM_Start+0x92>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d108      	bne.n	80025ce <HAL_TIM_PWM_Start+0x82>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2242      	movs	r2, #66	; 0x42
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	4193      	sbcs	r3, r2
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e007      	b.n	80025de <HAL_TIM_PWM_Start+0x92>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2243      	movs	r2, #67	; 0x43
 80025d2:	5c9b      	ldrb	r3, [r3, r2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	4193      	sbcs	r3, r2
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e090      	b.n	8002708 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_PWM_Start+0xaa>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223e      	movs	r2, #62	; 0x3e
 80025f0:	2102      	movs	r1, #2
 80025f2:	5499      	strb	r1, [r3, r2]
 80025f4:	e023      	b.n	800263e <HAL_TIM_PWM_Start+0xf2>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d104      	bne.n	8002606 <HAL_TIM_PWM_Start+0xba>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	223f      	movs	r2, #63	; 0x3f
 8002600:	2102      	movs	r1, #2
 8002602:	5499      	strb	r1, [r3, r2]
 8002604:	e01b      	b.n	800263e <HAL_TIM_PWM_Start+0xf2>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d104      	bne.n	8002616 <HAL_TIM_PWM_Start+0xca>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]
 8002614:	e013      	b.n	800263e <HAL_TIM_PWM_Start+0xf2>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	d104      	bne.n	8002626 <HAL_TIM_PWM_Start+0xda>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	2102      	movs	r1, #2
 8002622:	5499      	strb	r1, [r3, r2]
 8002624:	e00b      	b.n	800263e <HAL_TIM_PWM_Start+0xf2>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b10      	cmp	r3, #16
 800262a:	d104      	bne.n	8002636 <HAL_TIM_PWM_Start+0xea>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2242      	movs	r2, #66	; 0x42
 8002630:	2102      	movs	r1, #2
 8002632:	5499      	strb	r1, [r3, r2]
 8002634:	e003      	b.n	800263e <HAL_TIM_PWM_Start+0xf2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2243      	movs	r2, #67	; 0x43
 800263a:	2102      	movs	r1, #2
 800263c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	0018      	movs	r0, r3
 8002648:	f000 fe1c 	bl	8003284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <HAL_TIM_PWM_Start+0x1c4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00e      	beq.n	8002674 <HAL_TIM_PWM_Start+0x128>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2e      	ldr	r2, [pc, #184]	; (8002714 <HAL_TIM_PWM_Start+0x1c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_TIM_PWM_Start+0x128>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2c      	ldr	r2, [pc, #176]	; (8002718 <HAL_TIM_PWM_Start+0x1cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_TIM_PWM_Start+0x128>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_TIM_PWM_Start+0x1d0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_TIM_PWM_Start+0x12c>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_TIM_PWM_Start+0x12e>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0209      	lsls	r1, r1, #8
 800268c:	430a      	orrs	r2, r1
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_TIM_PWM_Start+0x1c4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d014      	beq.n	80026c4 <HAL_TIM_PWM_Start+0x178>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d00e      	beq.n	80026c4 <HAL_TIM_PWM_Start+0x178>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_TIM_PWM_Start+0x1d4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIM_PWM_Start+0x178>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_TIM_PWM_Start+0x1d8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_TIM_PWM_Start+0x178>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_TIM_PWM_Start+0x1c8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d116      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_TIM_PWM_Start+0x1dc>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d016      	beq.n	8002704 <HAL_TIM_PWM_Start+0x1b8>
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	025b      	lsls	r3, r3, #9
 80026dc:	429a      	cmp	r2, r3
 80026de:	d011      	beq.n	8002704 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2101      	movs	r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f0:	e008      	b.n	8002704 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e000      	b.n	8002706 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	00010007 	.word	0x00010007

0800272c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	223c      	movs	r2, #60	; 0x3c
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e0df      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	223c      	movs	r2, #60	; 0x3c
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b14      	cmp	r3, #20
 8002752:	d900      	bls.n	8002756 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002754:	e0d1      	b.n	80028fa <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa2a 	bl	8002bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2108      	movs	r1, #8
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
      break;
 80027a2:	e0ab      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 fa93 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0109      	lsls	r1, r1, #4
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4951      	ldr	r1, [pc, #324]	; (8002914 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
      break;
 80027e8:	e088      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 faf4 	bl	8002de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2108      	movs	r1, #8
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69d9      	ldr	r1, [r3, #28]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	61da      	str	r2, [r3, #28]
      break;
 800282a:	e067      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fb5b 	bl	8002ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0109      	lsls	r1, r1, #4
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	492f      	ldr	r1, [pc, #188]	; (8002914 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002858:	400a      	ands	r2, r1
 800285a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69d9      	ldr	r1, [r3, #28]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
      break;
 8002870:	e044      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f000 fba2 	bl	8002fc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2108      	movs	r1, #8
 800288c:	430a      	orrs	r2, r1
 800288e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2104      	movs	r1, #4
 800289c:	438a      	bics	r2, r1
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028b2:	e023      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	0011      	movs	r1, r2
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 fbe1 	bl	8003084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0109      	lsls	r1, r1, #4
 80028d0:	430a      	orrs	r2, r1
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028f8:	e000      	b.n	80028fc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80028fa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	223c      	movs	r2, #60	; 0x3c
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	080035b4 	.word	0x080035b4
 8002914:	fffffbff 	.word	0xfffffbff

08002918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223c      	movs	r2, #60	; 0x3c
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b7      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x188>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223c      	movs	r2, #60	; 0x3c
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	223d      	movs	r2, #61	; 0x3d
 800293c:	2102      	movs	r1, #2
 800293e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <HAL_TIM_ConfigClockSource+0x190>)
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_TIM_ConfigClockSource+0x194>)
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0192      	lsls	r2, r2, #6
 8002968:	4293      	cmp	r3, r2
 800296a:	d040      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xd6>
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	0192      	lsls	r2, r2, #6
 8002970:	4293      	cmp	r3, r2
 8002972:	d900      	bls.n	8002976 <HAL_TIM_ConfigClockSource+0x5e>
 8002974:	e088      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0152      	lsls	r2, r2, #5
 800297a:	4293      	cmp	r3, r2
 800297c:	d100      	bne.n	8002980 <HAL_TIM_ConfigClockSource+0x68>
 800297e:	e085      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0152      	lsls	r2, r2, #5
 8002984:	4293      	cmp	r3, r2
 8002986:	d900      	bls.n	800298a <HAL_TIM_ConfigClockSource+0x72>
 8002988:	e07e      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 800298a:	2b70      	cmp	r3, #112	; 0x70
 800298c:	d018      	beq.n	80029c0 <HAL_TIM_ConfigClockSource+0xa8>
 800298e:	d900      	bls.n	8002992 <HAL_TIM_ConfigClockSource+0x7a>
 8002990:	e07a      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 8002992:	2b60      	cmp	r3, #96	; 0x60
 8002994:	d04f      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x11e>
 8002996:	d900      	bls.n	800299a <HAL_TIM_ConfigClockSource+0x82>
 8002998:	e076      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 800299a:	2b50      	cmp	r3, #80	; 0x50
 800299c:	d03b      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xfe>
 800299e:	d900      	bls.n	80029a2 <HAL_TIM_ConfigClockSource+0x8a>
 80029a0:	e072      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d057      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x13e>
 80029a6:	d900      	bls.n	80029aa <HAL_TIM_ConfigClockSource+0x92>
 80029a8:	e06e      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 80029aa:	2b30      	cmp	r3, #48	; 0x30
 80029ac:	d063      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x15e>
 80029ae:	d86b      	bhi.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d060      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x15e>
 80029b4:	d868      	bhi.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d05d      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x15e>
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d05b      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029be:	e063      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f000 fc38 	bl	8003244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2277      	movs	r2, #119	; 0x77
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	609a      	str	r2, [r3, #8]
      break;
 80029ec:	e04f      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f000 fc21 	bl	8003244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	01c9      	lsls	r1, r1, #7
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
      break;
 8002a14:	e03b      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	001a      	movs	r2, r3
 8002a24:	f000 fb92 	bl	800314c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2150      	movs	r1, #80	; 0x50
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fbec 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002a34:	e02b      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	001a      	movs	r2, r3
 8002a44:	f000 fbb0 	bl	80031a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2160      	movs	r1, #96	; 0x60
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fbdc 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002a54:	e01b      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	001a      	movs	r2, r3
 8002a64:	f000 fb72 	bl	800314c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fbcc 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002a74:	e00b      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f000 fbc3 	bl	800320c <TIM_ITRx_SetConfig>
        break;
 8002a86:	e002      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	e000      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002a8c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223d      	movs	r2, #61	; 0x3d
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223c      	movs	r2, #60	; 0x3c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	ffceff88 	.word	0xffceff88
 8002aac:	ffff00ff 	.word	0xffff00ff

08002ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a38      	ldr	r2, [pc, #224]	; (8002ba4 <TIM_Base_SetConfig+0xf4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00c      	beq.n	8002ae2 <TIM_Base_SetConfig+0x32>
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	05db      	lsls	r3, r3, #23
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d007      	beq.n	8002ae2 <TIM_Base_SetConfig+0x32>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <TIM_Base_SetConfig+0xf8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0x32>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a33      	ldr	r2, [pc, #204]	; (8002bac <TIM_Base_SetConfig+0xfc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2270      	movs	r2, #112	; 0x70
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2b      	ldr	r2, [pc, #172]	; (8002ba4 <TIM_Base_SetConfig+0xf4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d01c      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d017      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <TIM_Base_SetConfig+0xf8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <TIM_Base_SetConfig+0xfc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <TIM_Base_SetConfig+0x100>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <TIM_Base_SetConfig+0x104>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <TIM_Base_SetConfig+0x108>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x86>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <TIM_Base_SetConfig+0x10c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <TIM_Base_SetConfig+0x110>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <TIM_Base_SetConfig+0xf4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0xde>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <TIM_Base_SetConfig+0x104>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0xde>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <TIM_Base_SetConfig+0x108>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0xde>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <TIM_Base_SetConfig+0x10c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d103      	bne.n	8002b96 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	615a      	str	r2, [r3, #20]
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b004      	add	sp, #16
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40002000 	.word	0x40002000
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	fffffcff 	.word	0xfffffcff

08002bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <TIM_OC1_SetConfig+0xf8>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <TIM_OC1_SetConfig+0xfc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <TIM_OC1_SetConfig+0x100>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <TIM_OC1_SetConfig+0x104>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <TIM_OC1_SetConfig+0x108>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4393      	bics	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4393      	bics	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <TIM_OC1_SetConfig+0xfc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <TIM_OC1_SetConfig+0x100>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <TIM_OC1_SetConfig+0x104>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <TIM_OC1_SetConfig+0x108>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <TIM_OC1_SetConfig+0x10c>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <TIM_OC1_SetConfig+0x110>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b006      	add	sp, #24
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	fffeff8f 	.word	0xfffeff8f
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	fffffeff 	.word	0xfffffeff
 8002cd4:	fffffdff 	.word	0xfffffdff

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	4393      	bics	r3, r2
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <TIM_OC2_SetConfig+0xe8>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <TIM_OC2_SetConfig+0xec>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2220      	movs	r2, #32
 8002d22:	4393      	bics	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10d      	bne.n	8002d56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	4393      	bics	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	4393      	bics	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <TIM_OC2_SetConfig+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <TIM_OC2_SetConfig+0xf8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_OC2_SetConfig+0xfc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d113      	bne.n	8002d9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <TIM_OC2_SetConfig+0x100>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <TIM_OC2_SetConfig+0x104>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	feff8fff 	.word	0xfeff8fff
 8002dc4:	fffffcff 	.word	0xfffffcff
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800
 8002dd8:	fffffbff 	.word	0xfffffbff
 8002ddc:	fffff7ff 	.word	0xfffff7ff

08002de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a35      	ldr	r2, [pc, #212]	; (8002ec4 <TIM_OC3_SetConfig+0xe4>)
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <TIM_OC3_SetConfig+0xe8>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2203      	movs	r2, #3
 8002e14:	4393      	bics	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <TIM_OC3_SetConfig+0xec>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <TIM_OC3_SetConfig+0xf0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10d      	bne.n	8002e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <TIM_OC3_SetConfig+0xf4>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <TIM_OC3_SetConfig+0xf8>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <TIM_OC3_SetConfig+0xf0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <TIM_OC3_SetConfig+0xfc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <TIM_OC3_SetConfig+0x100>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <TIM_OC3_SetConfig+0x104>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <TIM_OC3_SetConfig+0x108>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <TIM_OC3_SetConfig+0x10c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b006      	add	sp, #24
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	fffffeff 	.word	0xfffffeff
 8002ec8:	fffeff8f 	.word	0xfffeff8f
 8002ecc:	fffffdff 	.word	0xfffffdff
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	fffff7ff 	.word	0xfffff7ff
 8002ed8:	fffffbff 	.word	0xfffffbff
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	ffffefff 	.word	0xffffefff
 8002eec:	ffffdfff 	.word	0xffffdfff

08002ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <TIM_OC4_SetConfig+0xb0>)
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <TIM_OC4_SetConfig+0xb4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <TIM_OC4_SetConfig+0xb8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <TIM_OC4_SetConfig+0xbc>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <TIM_OC4_SetConfig+0xc0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <TIM_OC4_SetConfig+0xc4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <TIM_OC4_SetConfig+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <TIM_OC4_SetConfig+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <TIM_OC4_SetConfig+0xd0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b006      	add	sp, #24
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	ffffefff 	.word	0xffffefff
 8002fa4:	feff8fff 	.word	0xfeff8fff
 8002fa8:	fffffcff 	.word	0xfffffcff
 8002fac:	ffffdfff 	.word	0xffffdfff
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	ffffbfff 	.word	0xffffbfff

08002fc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4a25      	ldr	r2, [pc, #148]	; (8003068 <TIM_OC5_SetConfig+0xa4>)
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <TIM_OC5_SetConfig+0xa8>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <TIM_OC5_SetConfig+0xac>)
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a17      	ldr	r2, [pc, #92]	; (8003074 <TIM_OC5_SetConfig+0xb0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <TIM_OC5_SetConfig+0xb4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <TIM_OC5_SetConfig+0xb8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <TIM_OC5_SetConfig+0xbc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d109      	bne.n	8003046 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <TIM_OC5_SetConfig+0xa4>)
 8003036:	4013      	ands	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffeffff 	.word	0xfffeffff
 800306c:	fffeff8f 	.word	0xfffeff8f
 8003070:	fffdffff 	.word	0xfffdffff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a26      	ldr	r2, [pc, #152]	; (800312c <TIM_OC6_SetConfig+0xa8>)
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a20      	ldr	r2, [pc, #128]	; (8003130 <TIM_OC6_SetConfig+0xac>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <TIM_OC6_SetConfig+0xb0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <TIM_OC6_SetConfig+0xb4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <TIM_OC6_SetConfig+0xb8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <TIM_OC6_SetConfig+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <TIM_OC6_SetConfig+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d109      	bne.n	8003108 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <TIM_OC6_SetConfig+0xc4>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b006      	add	sp, #24
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	ffefffff 	.word	0xffefffff
 8003130:	feff8fff 	.word	0xfeff8fff
 8003134:	ffdfffff 	.word	0xffdfffff
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800
 8003148:	fffbffff 	.word	0xfffbffff

0800314c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2201      	movs	r2, #1
 8003164:	4393      	bics	r3, r2
 8003166:	001a      	movs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	22f0      	movs	r2, #240	; 0xf0
 8003176:	4393      	bics	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	220a      	movs	r2, #10
 8003188:	4393      	bics	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b006      	add	sp, #24
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	2210      	movs	r2, #16
 80031ba:	4393      	bics	r3, r2
 80031bc:	001a      	movs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <TIM_TI2_ConfigInputStage+0x60>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	031b      	lsls	r3, r3, #12
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	22a0      	movs	r2, #160	; 0xa0
 80031e4:	4393      	bics	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	ffff0fff 	.word	0xffff0fff

0800320c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <TIM_ITRx_SetConfig+0x34>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	2207      	movs	r2, #7
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	ffcfff8f 	.word	0xffcfff8f

08003244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <TIM_ETR_SetConfig+0x3c>)
 800325c:	4013      	ands	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	ffff00ff 	.word	0xffff00ff

08003284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	221f      	movs	r2, #31
 8003294:	4013      	ands	r3, r2
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	43d2      	mvns	r2, r2
 80032a6:	401a      	ands	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	211f      	movs	r1, #31
 80032b4:	400b      	ands	r3, r1
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4099      	lsls	r1, r3
 80032ba:	000b      	movs	r3, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b006      	add	sp, #24
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223c      	movs	r2, #60	; 0x3c
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e05a      	b.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	223c      	movs	r2, #60	; 0x3c
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	223d      	movs	r2, #61	; 0x3d
 80032f0:	2102      	movs	r1, #2
 80032f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003312:	4013      	ands	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2270      	movs	r2, #112	; 0x70
 8003324:	4393      	bics	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d014      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	05db      	lsls	r3, r3, #23
 800334c:	429a      	cmp	r2, r3
 800334e:	d00e      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	4393      	bics	r3, r2
 8003374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	223d      	movs	r2, #61	; 0x3d
 800338c:	2101      	movs	r1, #1
 800338e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	223c      	movs	r2, #60	; 0x3c
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	ff0fffff 	.word	0xff0fffff
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40014000 	.word	0x40014000

080033b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223c      	movs	r2, #60	; 0x3c
 80033ca:	5c9b      	ldrb	r3, [r3, r2]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e079      	b.n	80034c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223c      	movs	r2, #60	; 0x3c
 80033d8:	2101      	movs	r1, #1
 80033da:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	22ff      	movs	r2, #255	; 0xff
 80033e0:	4393      	bics	r3, r2
 80033e2:	001a      	movs	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80033f0:	401a      	ands	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a35      	ldr	r2, [pc, #212]	; (80034d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80033fe:	401a      	ands	r2, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800340c:	401a      	ands	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a30      	ldr	r2, [pc, #192]	; (80034dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800341a:	401a      	ands	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003428:	401a      	ands	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003436:	401a      	ands	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003444:	401a      	ands	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d106      	bne.n	8003468 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800345e:	401a      	ands	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d121      	bne.n	80034b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003476:	401a      	ands	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	051b      	lsls	r3, r3, #20
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003486:	401a      	ands	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003494:	401a      	ands	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80034ac:	401a      	ands	r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	223c      	movs	r2, #60	; 0x3c
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	fffffcff 	.word	0xfffffcff
 80034d4:	fffffbff 	.word	0xfffffbff
 80034d8:	fffff7ff 	.word	0xfffff7ff
 80034dc:	ffffefff 	.word	0xffffefff
 80034e0:	ffffdfff 	.word	0xffffdfff
 80034e4:	ffffbfff 	.word	0xffffbfff
 80034e8:	fff0ffff 	.word	0xfff0ffff
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	efffffff 	.word	0xefffffff
 80034f4:	ff0fffff 	.word	0xff0fffff
 80034f8:	feffffff 	.word	0xfeffffff
 80034fc:	fdffffff 	.word	0xfdffffff
 8003500:	dfffffff 	.word	0xdfffffff

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	2600      	movs	r6, #0
 8003508:	4d0c      	ldr	r5, [pc, #48]	; (800353c <__libc_init_array+0x38>)
 800350a:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350c:	1b64      	subs	r4, r4, r5
 800350e:	10a4      	asrs	r4, r4, #2
 8003510:	42a6      	cmp	r6, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	2600      	movs	r6, #0
 8003516:	f000 f821 	bl	800355c <_init>
 800351a:	4d0a      	ldr	r5, [pc, #40]	; (8003544 <__libc_init_array+0x40>)
 800351c:	4c0a      	ldr	r4, [pc, #40]	; (8003548 <__libc_init_array+0x44>)
 800351e:	1b64      	subs	r4, r4, r5
 8003520:	10a4      	asrs	r4, r4, #2
 8003522:	42a6      	cmp	r6, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	00b3      	lsls	r3, r6, #2
 800352a:	58eb      	ldr	r3, [r5, r3]
 800352c:	4798      	blx	r3
 800352e:	3601      	adds	r6, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	00b3      	lsls	r3, r6, #2
 8003534:	58eb      	ldr	r3, [r5, r3]
 8003536:	4798      	blx	r3
 8003538:	3601      	adds	r6, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	08003608 	.word	0x08003608
 8003540:	08003608 	.word	0x08003608
 8003544:	08003608 	.word	0x08003608
 8003548:	0800360c 	.word	0x0800360c

0800354c <memset>:
 800354c:	0003      	movs	r3, r0
 800354e:	1882      	adds	r2, r0, r2
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	7019      	strb	r1, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
